#!/bin/bash
fleet_bin="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
printf "$fleet_bin\n" >&2
set -e
ship=$1
echo >&2 Creating arguments for starting $ship
args='TRAP'
if [ 3 = ${#ship} ]; then
  args="-I $ship"
  if [ -d ships/$ship ]; then
    args="$args ships/$ship"
  else
    args="$args -sA $(dirname $fleet_bin)/arvo -c ships/$ship"
  fi
elif [ 6 = ${#ship} ] || [ 13 = ${#ship} ] || [ 27 == ${#ship} ] ; then
  if [ -d ships/$ship ]; then args="ships/$ship"
  else
    printf "Finding parent for $ship\n" >&2
    sein=$($fleet_bin/urb -d "(sein:title ~$ship)" 2>/dev/null)  # XX figure out port
    printf "Parent: $sein\n" >&2

    if [ ! -d ships/${sein:1} ]; then
      printf "Error: parent ${sein} not started.\n" >&2
      exit 1
    fi

    sein_our=$($fleet_bin/urb ships/${sein:1} -d "our")
    until [ "$sein" = $sein_our ]; do
      printf "Parent $sein still thinks it's $sein_our. Waiting\n" >&2
      sleep 1
      sein_our=$($fleet_bin/urb ships/${sein:1} -d "our")
    done
    printf "Parent is ready..\n" >&2

    ticket=$($fleet_bin/urb ships/${sein:1} -d "+ticket ~$ship")
    pill_path=ships/${sein:1}/.urb/urbit.pill
    args="-B $pill_path -c ships/$ship -w $ship -t $ticket"
  fi
else
  echo >&2 "Weird ship $ship, length ${#ship}"
  exit 1
fi
if [ "$FAKE" ]; then
  args="-F $args"  #  XX  use -N for multi-machine tests
fi
echo $args
